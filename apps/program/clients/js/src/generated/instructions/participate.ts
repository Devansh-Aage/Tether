/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PARTICIPATE_DISCRIMINATOR = 0;

export function getParticipateDiscriminatorBytes() {
  return getU8Encoder().encode(PARTICIPATE_DISCRIMINATOR);
}

export type ParticipateInstruction<
  TProgram extends string = typeof PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountParticipant extends string | AccountMeta<string> = string,
  TAccountParticipantAta extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountParticipant extends string
        ? WritableAccount<TAccountParticipant>
        : TAccountParticipant,
      TAccountParticipantAta extends string
        ? WritableAccount<TAccountParticipantAta>
        : TAccountParticipantAta,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ParticipateInstructionData = {
  discriminator: number;
  activeTime: bigint;
  seed: bigint;
};

export type ParticipateInstructionDataArgs = {
  activeTime: number | bigint;
  seed: number | bigint;
};

export function getParticipateInstructionDataEncoder(): FixedSizeEncoder<ParticipateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['activeTime', getI64Encoder()],
      ['seed', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PARTICIPATE_DISCRIMINATOR })
  );
}

export function getParticipateInstructionDataDecoder(): FixedSizeDecoder<ParticipateInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['activeTime', getI64Decoder()],
    ['seed', getU64Decoder()],
  ]);
}

export function getParticipateInstructionDataCodec(): FixedSizeCodec<
  ParticipateInstructionDataArgs,
  ParticipateInstructionData
> {
  return combineCodec(
    getParticipateInstructionDataEncoder(),
    getParticipateInstructionDataDecoder()
  );
}

export type ParticipateInput<
  TAccountSigner extends string = string,
  TAccountParticipant extends string = string,
  TAccountParticipantAta extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Signer account */
  signer: TransactionSigner<TAccountSigner>;
  /** Participant account to create */
  participant: Address<TAccountParticipant>;
  /** Participant's ATA */
  participantAta: Address<TAccountParticipantAta>;
  /** Mint Account */
  mint: Address<TAccountMint>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  activeTime: ParticipateInstructionDataArgs['activeTime'];
  seed: ParticipateInstructionDataArgs['seed'];
};

export function getParticipateInstruction<
  TAccountSigner extends string,
  TAccountParticipant extends string,
  TAccountParticipantAta extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PROGRAM_PROGRAM_ADDRESS,
>(
  input: ParticipateInput<
    TAccountSigner,
    TAccountParticipant,
    TAccountParticipantAta,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ParticipateInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountParticipant,
  TAccountParticipantAta,
  TAccountMint,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    participant: { value: input.participant ?? null, isWritable: true },
    participantAta: { value: input.participantAta ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.participant),
      getAccountMeta(accounts.participantAta),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getParticipateInstructionDataEncoder().encode(
      args as ParticipateInstructionDataArgs
    ),
    programAddress,
  } as ParticipateInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountParticipant,
    TAccountParticipantAta,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedParticipateInstruction<
  TProgram extends string = typeof PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Signer account */
    signer: TAccountMetas[0];
    /** Participant account to create */
    participant: TAccountMetas[1];
    /** Participant's ATA */
    participantAta: TAccountMetas[2];
    /** Mint Account */
    mint: TAccountMetas[3];
    /** Token program */
    tokenProgram: TAccountMetas[4];
    /** System program */
    systemProgram: TAccountMetas[5];
  };
  data: ParticipateInstructionData;
};

export function parseParticipateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedParticipateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      participant: getNextAccount(),
      participantAta: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getParticipateInstructionDataDecoder().decode(instruction.data),
  };
}
