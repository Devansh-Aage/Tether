/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedClaimInstruction,
  type ParsedParticipateInstruction,
} from '../instructions';

export const PROGRAM_PROGRAM_ADDRESS =
  '4gP1Egxwstd3rraRQgCaA7pN4ty7nSMrxDxaXfxYgsgs' as Address<'4gP1Egxwstd3rraRQgCaA7pN4ty7nSMrxDxaXfxYgsgs'>;

export enum ProgramAccount {
  Participant,
}

export enum ProgramInstruction {
  Participate,
  Claim,
}

export function identifyProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return ProgramInstruction.Participate;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return ProgramInstruction.Claim;
  }
  throw new Error(
    'The provided instruction could not be identified as a program instruction.'
  );
}

export type ParsedProgramInstruction<
  TProgram extends string = '4gP1Egxwstd3rraRQgCaA7pN4ty7nSMrxDxaXfxYgsgs',
> =
  | ({
      instructionType: ProgramInstruction.Participate;
    } & ParsedParticipateInstruction<TProgram>)
  | ({
      instructionType: ProgramInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>);
