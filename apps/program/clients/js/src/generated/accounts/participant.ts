/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export type Participant = {
  stake: bigint;
  activeTime: bigint;
  seed: bigint;
  participant: Address;
  bump: ReadonlyUint8Array;
};

export type ParticipantArgs = {
  stake: number | bigint;
  activeTime: number | bigint;
  seed: number | bigint;
  participant: Address;
  bump: ReadonlyUint8Array;
};

export function getParticipantEncoder(): FixedSizeEncoder<ParticipantArgs> {
  return getStructEncoder([
    ['stake', getU64Encoder()],
    ['activeTime', getI64Encoder()],
    ['seed', getU64Encoder()],
    ['participant', getAddressEncoder()],
    ['bump', fixEncoderSize(getBytesEncoder(), 1)],
  ]);
}

export function getParticipantDecoder(): FixedSizeDecoder<Participant> {
  return getStructDecoder([
    ['stake', getU64Decoder()],
    ['activeTime', getI64Decoder()],
    ['seed', getU64Decoder()],
    ['participant', getAddressDecoder()],
    ['bump', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getParticipantCodec(): FixedSizeCodec<
  ParticipantArgs,
  Participant
> {
  return combineCodec(getParticipantEncoder(), getParticipantDecoder());
}

export function decodeParticipant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Participant, TAddress>;
export function decodeParticipant<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Participant, TAddress>;
export function decodeParticipant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Participant, TAddress> | MaybeAccount<Participant, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getParticipantDecoder()
  );
}

export async function fetchParticipant<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Participant, TAddress>> {
  const maybeAccount = await fetchMaybeParticipant(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeParticipant<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Participant, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeParticipant(maybeAccount);
}

export async function fetchAllParticipant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Participant>[]> {
  const maybeAccounts = await fetchAllMaybeParticipant(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeParticipant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Participant>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeParticipant(maybeAccount));
}

export function getParticipantSize(): number {
  return 57;
}
