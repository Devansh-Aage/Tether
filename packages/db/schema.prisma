// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  PASSWORD
  GOOGLE
}

model User {
  id String @id @default(uuid()) @db.Uuid
  email String @unique
  username String 
  profileImg String?
  password String? @db.VarChar(255)
  pubKey String?
  googleId String?  //unique id given by google to each email
  authProvider AuthProvider
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  googleRefreshToken String?

  tasks Task[]  // One-to-Many: User has many Tasks
  milestones Milestone[]  // One-to-Many: User has many Milestones
  
  messageSender Message[] @relation("MessageSender")
  messageReceiver Message[] @relation("MessageReceiver")

  callSender CallLog[] @relation("CallSender")
  callReceiver CallLog[] @relation("CallReceiver")

  //Group messages
  grpMessageSender GroupMessage[] @relation("GroupMessageSender")

  groupMemberships GroupMembership[]

  // One-to-Many: User can be the admin of many groups
  // We need a specific name for this relation because there are two relations
  // between User and Group (adminship and membership).
  creatorOfGroups Group[] @relation("GroupCreator") 

  winnerOfContest Contest[] @relation("ContestWinner") //One to many
  membersOfContest Contest[] @relation("ContestMembers")

   // A user can be the "requestor" in many friendships
  friendshipsInitiated Friendship[] @relation("UserFriendA")
  // A user can be the "recipient" in many friendships
  friendshipsReceived  Friendship[] @relation("UserFriendB")
}

model Task{
  id String @id @default(uuid()) @db.Uuid
  title String
  isDone Boolean @default(false)
  userId String @db.Uuid
  owner User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Milestone{
  id String @id @default(uuid()) @db.Uuid
  title String
  description String
  isDone Boolean @default(false)
  deadline DateTime
  userId String @db.Uuid
  owner User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model FriendReq{
  id String @id @default(uuid()) @db.Uuid
  senderId String @db.Uuid
  receiverId String @db.Uuid
  sentAt DateTime @default(now())
}

model Friendship {
  id              String   @id @default(uuid()) @db.Uuid
  userAId         String   @db.Uuid // ID of the first user in the friendship
  userBId         String   @db.Uuid // ID of the second user in the friendship
  establishedAt   DateTime @default(now()) // When the friendship was established

  messages Message[]

  // Relations to User model
  userA           User     @relation("UserFriendA", fields: [userAId], references: [id], onDelete: Cascade)
  userB           User     @relation("UserFriendB", fields: [userBId], references: [id], onDelete: Cascade)

  //while adding of friends i have to store smaller user ID as user A

  // Enforce uniqueness for the pair (to prevent duplicate friendships)
  // And ensure order doesn't matter (e.g., (A,B) is same as (B,A))
  // For simplicity, we can enforce (A,B) unique and always store A < B
  // Or handle in application logic. For DB constraint, assuming userAId < userBId for canonical representation
  @@unique([userAId, userBId])
}

model Message{
  id String @id @default(uuid()) @db.Uuid
  senderId String @db.Uuid
  receiverId String @db.Uuid
  text String?
  media String?
  timestamp DateTime @default(now())

  isSent Boolean @default(false)
  isSeen Boolean @default(false)

  friendshipId String @db.Uuid
  friendship Friendship @relation(fields: [friendshipId],references: [id],onDelete: Cascade)

  sender User @relation("MessageSender",fields: [senderId],references: [id],onDelete: Cascade)

  receiver User @relation("MessageReceiver",fields: [receiverId],references: [id],onDelete: Cascade)
}


model Group{
  id String @id @default(uuid()) @db.Uuid
  name String
  groupImg String?
  creatorId String @db.Uuid

  creator User @relation("GroupCreator",fields: [creatorId], references: [id], onDelete: Cascade)

  contest Contest[] //One to Many

  messages GroupMessage[]

  groupMemberships GroupMembership[]
}

model GroupMembership {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  groupId   String   @db.Uuid
  joinedAt  DateTime @default(now())
  isAdmin   Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Prevent duplicate memberships
}

model GroupMessage{
  id String @id @default(uuid()) @db.Uuid
  senderId String @db.Uuid
  text String?
  media String?
  timestamp DateTime @default(now())

  isSent String[] @db.Uuid
  isSeen String[] @db.Uuid

  groupId String @db.Uuid
  group Group @relation(fields: [groupId],references: [id],onDelete: Cascade)

  sender User @relation("GroupMessageSender",fields: [senderId],references: [id],onDelete: Cascade)
}


model Contest{
  id String @id @default(uuid()) @db.Uuid
  title String
  description String
  startTime DateTime
  endTime DateTime
  totalStakeAmount Int @default(0)
  winnerId String? @db.Uuid //foreign key
  groupId String @db.Uuid //foreign key
  
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade) //virtual table

  winner User? @relation("ContestWinner",fields: [winnerId], references: [id], onDelete: Cascade)

  contestMembers User[] @relation("ContestMembers")
}


model CallLog{
  id String @id @default(uuid()) @db.Uuid
  wasConnected Boolean @default(false)
  duration Int?
  timestamp DateTime @default(now())
  callerId String @db.Uuid
  receiverId String @db.Uuid

  caller User @relation("CallSender",fields: [callerId],references: [id],onDelete: Cascade)

  receiver User @relation("CallReceiver",fields: [receiverId],references: [id],onDelete: Cascade)
}

model Session {
  sid       String    @id @db.VarChar(255) // Session ID from the cookie
  sess      String    @db.Text // The actual session data (e.g., JSON string)
  expiresAt DateTime  @map("expire") // Must be named 'expire' for connect-pg-simple
  
  @@map("sessions") // Maps to the 'sessions' table in PostgreSQL
}
